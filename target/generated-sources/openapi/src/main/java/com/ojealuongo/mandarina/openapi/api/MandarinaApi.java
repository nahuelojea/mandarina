/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.ojealuongo.mandarina.openapi.api;

import com.ojealuongo.mandarina.openapi.dto.ErrorResponseDTO;
import com.ojealuongo.mandarina.openapi.dto.MandarinaDTO;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-10-23T12:02:06.655944548-03:00[America/Argentina/Buenos_Aires]")
@Validated
@Tag(name = "mandarina", description = "the mandarina API")
@RequestMapping("${openapi.msMandarinaV1.base-path:}")
public interface MandarinaApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /mandarina : Crear una nueva mandarina
     * Este servicio crea una nueva mandarina en base de datos con los par치metros recibidos en el servicio
     *
     * @param mandarinaDTO Datos de entrada (required)
     * @return En caso de que la mandarina se haya creado correctamente (status code 201)
     *         or En caso de que no se envien los datos necesarios para la creaci칩n de la mandarina o los mismos tengan un formato erroneo (status code 400)
     *         or En caso de error general en el servidor (status code 500)
     */
    @Operation(
        operationId = "createMandarina",
        summary = "Crear una nueva mandarina",
        tags = { "Creaci칩n de una mandarina" },
        responses = {
            @ApiResponse(responseCode = "201", description = "En caso de que la mandarina se haya creado correctamente", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MandarinaDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "En caso de que no se envien los datos necesarios para la creaci칩n de la mandarina o los mismos tengan un formato erroneo", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDTO.class))
            }),
            @ApiResponse(responseCode = "500", description = "En caso de error general en el servidor", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/mandarina",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<MandarinaDTO> createMandarina(
        @Parameter(name = "MandarinaDTO", description = "Datos de entrada", required = true) @Valid @RequestBody MandarinaDTO mandarinaDTO
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
